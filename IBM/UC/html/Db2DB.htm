<?xml version="1.0" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>Db2DB - 'Database' sub-class for implementing DB2-specific functionality</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<link rev="made" href="mailto:root@localhost" />
</head>

<body style="background-color: white">

<p><a name="__index__"></a></p>
<!-- INDEX BEGIN -->

<ul>

	<li><a href="#name">NAME</a></li>
	<li><a href="#synopsis">SYNOPSIS</a></li>
	<li><a href="#description">DESCRIPTION</a></li>
	<li><a href="#examples">EXAMPLES</a></li>
</ul>
<!-- INDEX END -->

<hr />
<p>
</p>
<h1><a name="name">NAME</a></h1>
<p>Db2DB - 'Database' sub-class for implementing DB2-specific functionality</p>
<p>
</p>
<hr />
<h1><a name="synopsis">SYNOPSIS</a></h1>
<p>use IBM::UC::Database::Db2DB;</p>
<p>######################################
#           class methods            #
######################################</p>
<pre>
 $ob = Db2DB-&gt;createSimple([$dbdir,$dbname,$dbuser,$dbpass,$dbschema])
  where:
   $dbdir=database directory
   $dbname=name of database to create or use (optional parameter)
   $dbuser=user name to access database (optional parameter)
   $dbpass=password of user (optional parameter)
   $dbschema=schema name to use (optional parameter)</pre>
<pre>
 All parameters are optional, but those present must be in the specified order. Parameters not specified
 all get default values</pre>
<pre>
 $ob = Db2DB-&gt;createComplex($hash_map)
  where:
   $hash_map=hash map of parameter name/value pairs (see below for examples)</pre>
<pre>
 $ob = Db2DB-&gt;createFromConfig($config)
  where:
   $config=object of class DatabaseConfig (see below for examples)</pre>
<pre>
 $ob = Db2DB-&gt;createFromFile($ini)
  where:
   $ini=configuration file</pre>
<pre>
 See below for examples of all the above.</pre>
<p>######################################
#         object data methods        #
######################################</p>
<p>### get versions ###</p>
<pre>
 See 'Database' module for remaining get methods</pre>
<p>### set versions ###</p>
<pre>
 See 'Database' module for all available set methods</pre>
<p>######################################
#        other object methods        #
######################################</p>
<pre>
 $ob-&gt;start();                  Optionally create config-specified database instance if it doesn't exist,
                                create directories and copy files as necessary,
                                starts Db2DB database manager. Use createDatabase() to create database
 $ob-&gt;stop();                   Shuts down database manager and optionally delete config-specified database 
                                instance
 $ob-&gt;createDatabase([$name])   Create database, where $name is database name (optional)
                                if not specified, database name specified during object creation is used
 $ob-&gt;deleteDatabase([$name])   Delete database, where $name is database name (optional)
                                if not specified, database name specified during object creation is used
 $ob-&gt;connectToDatabase([$name])Connect to database, where $name is database name (optional)
                                if not specified, database name specified during object creation is used
                                subsequent sql statements will execute against this database
 $ob-&gt;createSchema([$name])     Create schema, where $name is schema name (optional)
                                if not specified, schema name specified during object creation is used
                                Assumes that database connection exists (connectToDatabase())
 $ob-&gt;deleteSchema([$name])     Delete schema, where $name is schema name (optional)
                                if not specified, schema name specified during object creation is used
 $ob-&gt;execSql(file);            Executes batch sql statements from file
                                (if no path is specified the current directory is assumed)
                                %DB% and %TABLE% can be used as placeholders for dbName() and dbTableName()
 $ob-&gt;execSqlStmt(sqlstmt);     Executes single sql statement</pre>
<p>
</p>
<hr />
<h1><a name="description">DESCRIPTION</a></h1>
<p>The Db2DB module is a sub-class of the Database super-class. Its purpose is to implement functionality
specific to DB2 databases: create a DB2 instance, create a DB2 database and associated
storage, launch the DB2 database manager, execute sql commands, and finally
shut down the database manager.</p>
<p>Initialisation of the database object's data can be done in several ways. Default values are used for 
object parameters not explicitly specified in the object's creation.</p>
<p>Valid configuration parameters and their default values follow (see DatabaseConfig.pm):</p>
<pre>
 ---------------------------------------------------------------------------------------------------------
 Parameter              Description                                     Default value
 ---------------------------------------------------------------------------------------------------------
 db_inst                Database instance name                          Environment var 'DB2INSTANCE'
 db_dir                 Database directory                              'NODE0000' in 'DB2INSTANCE' dir + db_name
 db_dir_clean           delete db directory contents first (yes/no)     no
 db_name                Database name                                   TEST
 db_host                Database host                                   localhost
 db_port                Database port                                   n/a
 db_user                User name to access database                    db2admin
 db_pass                Password for access to database                 db2admin
 db_schema              Schema name                                     db2admin
 db_port                Port number                                     50000
 db_sql_output          File where sql output is redirected             sqloutput.log
 solid_lic              Solid licence file/location                     n/a
 solid_ini_template     Template to use in generating solid.ini         n/a
 solid_db_inmemory      Specify whether to create in-memory database    n/a
 ---------------------------------------------------------------------------------------------------------</pre>
<p>if initialisation is via a configuration ini file the Database section must, by default, start with [DATABASE]
and end with [/DATABASE] or end of file, e.g.:</p>
<pre>
 [DATABASE]</pre>
<pre>
 ; Database Instance name
 db_inst=db2inst1</pre>
<pre>
 ; Database directory
 db_dir=/home/db2inst1/db2inst1/NODE0000/TEST</pre>
<pre>
 ; Specify whether to delete db_dir and its contents at startup (yes|no)
 db_dir_clean=yes</pre>
<pre>
 ; Host name where database is located
 db_host=localhost</pre>
<pre>
 ; Communication port for database
 db_port=2315</pre>
<pre>
 ; name of database to be created
 db_name=TEST
 .
 . 
 .
 etc.</pre>
<p>
</p>
<hr />
<h1><a name="examples">EXAMPLES</a></h1>
<p>Following are examples routines demonstrating the different ways a SolidDB object can be created:</p>
<pre>
 # Create database object from zero or more fixed order parameters
 # Parameters are all optional but those present must be in correct order
 # Parameters not included in the list get default values 
 sub create_simple
 {
        # Parameters: Database dir, db name, user name, password, schema
        my $source = Db2DB-&gt;createSimple('/home/db2inst1/db2inst1/NODE0000/TEST','TEST','user','pass','schema');
        $source-&gt;printout(); # verify contents of object</pre>
<pre>
        # As these parameters are optional you could just call:
        $source = Db2DB-&gt;createSimple();
        $source-&gt;printout();
        # Default values will be assigned to all parameters in this case</pre>
<pre>
        # If you provide less than 6 parameters they must be in the correct order
        $source = Db2DB-&gt;createSimple('/home/user/test');
        $source-&gt;printout();
        return $source;
 }</pre>
<pre>
 # Create database object from hash map. Any number of valid parameter names can be used
 # If a parameter name isn't recognised the program aborts and prints a full list of valid parameters
 # As before, default values are assigned to parameters not explicitly specified
 sub create_complex
 {
        my $source = Db2DB-&gt;createComplex({db_dir =&gt; '/home/db2inst1/db2inst1/NODE0000/TEST',db_name =&gt; 'TEST', 
                                           db_user =&gt; 'user', db_pass =&gt; 'mypass', db_schema =&gt; 'myschema'});
        $source-&gt;printout();
        return $source;
 }</pre>
<pre>
 # Create config object from hash map and use it to create db2 database object
 sub create_from_config
 {
        my $cfg_values = { 
                db_name =&gt; 'test', 
                db_schema =&gt; 'schema1',
        };
        my $source = Db2DB-&gt;createFromConfig(DatabaseConfig-&gt;createFromHash($cfg_values));
        $source-&gt;printout();
        return $source;
 }</pre>
<pre>
 # Create config object from configuration file and use it to create database object
 sub create_from_config_ini
 {
        my $ini = shift;
        my $db2_cfg = DatabaseConfig-&gt;new($ini);</pre>
<pre>
        $db2_cfg-&gt;initFromConfigFile();
        my $source = Db2DB-&gt;createFromConfig($db2_cfg);
        $source-&gt;printout();
        return $source;
 }</pre>
<pre>
 # Create database object directly from configuration file
 sub create_from_file
 {
        my $ini = shift;
        my $source = Db2DB-&gt;createFromFile($ini);
        $source-&gt;printout();
        return $source;
 }</pre>
<p>A typical sequence of calls to create a DB2 instance, start DB2 database manager, 
execute sql and shut down the manager would be:</p>
<pre>
 # Create DB2 database object, start solid manager, execute sql and shut down manager
 sub create_and_run_db2
 {
        my $env_parms = {
                debug =&gt; 1,
                smtp_server =&gt; 'D06DBE01',
        };
        Environment-&gt;createFromConfig(EnvironmentConfig-&gt;createFromHash($env_parms));
        
        my $db_params = { 
                db_dir =&gt; '/home/db2inst1/db2inst1/NODE0000/TEST',
                db_name =&gt; 'TEST',
                db_schema =&gt; 'db2inst1'
        };
        my $source = Db2DB-&gt;createFromConfig(DatabaseConfig-&gt;createFromHash($db_params));
        $source-&gt;start();
        $source-&gt;createDatabase();
        # create default schema db_schema
        $source-&gt;createSchema();
        # Set table name for sql file, %TABLE% placeholder in *.sql file will be replaced by it 
        $source-&gt;dbTableName('src');
        $source-&gt;execSql('db2_createsrc.sql');
        my $stmt = &quot;insert into src values (1,'Brendan','Smith','Annfield Crescent, Dublin','Ireland')&quot;;
        $source-&gt;execSqlStmt($stmt);
        $source-&gt;stop();
 }</pre>
<p>An example of automating the creation of source and target databases, setting up replication between
tables in the databases and verifying that replication has taken place would be as follows:</p>
<pre>
 # Create subscription and mirror between DB2 source and DB2 target
 # Source and target tables use the same database but different schemas
 sub replication_db2_to_db2
 {
        my $inp;
        my ($env_parms,$dbvals_src,$dbvals_tgt);
        my ($db_src, $db_tgt);
        my ($cdc_src, $cdc_tgt);
        my ($as_cfg, $mConsole);
        my ($ds_src, $ds_tgt);
        my $sub = 'subname';</pre>
<pre>
 eval { # trap errors so we can clean up before exiting</pre>
<pre>
        $env_parms = {
                debug =&gt; 1,
                smtp_server =&gt; 'D06DBE01',
                cvs_user =&gt; 'dmbuild',
                cvs_pass =&gt; 'dmbuild',
                cvs_repository =&gt; ':pserver:dmbuild:dmbuild@dmccvs.torolab.ibm.com:/home/cvsuser/cvsdata',
                cvs_home =&gt; '/home/db2inst1/cvs',
                cvs_tag =&gt; 'HEAD',
                cdc_db2_root_dir =&gt; '/home/db2inst1/Transformation Server for UDB/',
                ant_version =&gt; 'apache-ant-1.6.2',
                java_home =&gt; '/home/DownloadDirector/ibm-java2-i386-50/',
                java6_home =&gt; '/home/DownloadDirector/ibm-java-i386-60/',
        };
        Environment-&gt;createFromConfig(EnvironmentConfig-&gt;createFromHash($env_parms));</pre>
<pre>
        # create and start source database
        $dbvals_src = { 
                db_dir =&gt; '/home/db2inst1/db2inst1/NODE0000/TEST',
                db_name =&gt; 'TEST',
                db_user =&gt; 'db2inst1',
                db_pass =&gt; 'db2inst1',
        };
        $db_src = Db2DB-&gt;createFromConfig(DatabaseConfig-&gt;createFromHash($dbvals_src));
        $db_src-&gt;start();
        # createDatabase also connects to database
        $db_src-&gt;createDatabase();
        # Create source schema
        $db_src-&gt;createSchema('db2inst1');</pre>
<pre>
        # Start target and connect to it (already created above)
        $dbvals_tgt = { 
                db_dir =&gt; '/home/db2inst1/db2inst1/NODE0000/TEST',
                db_name =&gt; 'TEST',
                db_user =&gt; 'db2inst1',
                db_pass =&gt; 'db2inst1',
        };
        $db_tgt = Db2DB-&gt;createFromConfig(DatabaseConfig-&gt;createFromHash($dbvals_tgt));
        $db_tgt-&gt;start();
        # Since we didn't create database on target we need to connect to it to execute sql
        $db_tgt-&gt;connectToDatabase();
        # Create target schema (has to be different from source for subscriptions to work)
        $db_tgt-&gt;createSchema('db2inst2');</pre>
<pre>
        # Set table names for source and target sql
        $db_src-&gt;dbTableName('src');
        $db_tgt-&gt;dbTableName('tgt');
        $db_src-&gt;execSql('db2_createsrc.sql');  # Create table 'src'
        $db_tgt-&gt;execSql('db2_createtgt.sql');  # Create table 'tgt'
        
        # create source CDC
        $cdc_src = CDCDb2-&gt;createSimple('db2src_ts',11101,$db_src);</pre>
<pre>
        # create target CDC
        $cdc_tgt = CDCDb2-&gt;createSimple('db2tgt_ts',11102,$db_tgt);</pre>
<pre>
        # create and start source/target cdc's
        $cdc_src-&gt;create();
        $cdc_tgt-&gt;create();
        $cdc_src-&gt;start();
        $cdc_tgt-&gt;start();</pre>
<pre>
        # Access server configuration 
        $as_cfg = {ac_host =&gt; 'localhost',      # Access server host
                                  ac_port =&gt; '10101',   # Access server port
                                  ac_user =&gt; 'Admin',   # Access server user
                                  ac_pass =&gt; 'admin123'};       # Access server password
        
        # Create mConsole/Access server instance
        $mConsole = AccessServer-&gt;createFromConfig(AccessServerConfig-&gt;createFromHash($as_cfg));</pre>
<pre>
        # create datastores
        $ds_src = $mConsole-&gt;createDatastoreSimple(
                'db2src_ds',            # datastore name
                'Source datastore',     # datastore description
                'localhost',            # datastore host
                $cdc_src,               # cdc instance
        );
        $ds_tgt = $mConsole-&gt;createDatastoreSimple(
                'db2tgt_ds',            # datastore name
                'Target datastore',     # datastore description
                'localhost',            # datastore host
                $cdc_tgt,               # cdc instance
        );
        $mConsole-&gt;source($ds_src);     # assign source datastore
        $mConsole-&gt;target($ds_tgt);     # assign target datastore
        
        $mConsole-&gt;assignDatastoreUser($ds_src);
        $mConsole-&gt;assignDatastoreUser($ds_tgt);</pre>
<pre>
        $mConsole-&gt;createSubscription($sub);    # Create subscription between source and target datastores
        $mConsole-&gt;addMapping($sub);            # Add default mapping to subscription
        $mConsole-&gt;startMirroring($sub);        # Start mirroring</pre>
<pre>
        $db_src-&gt;execSql('db2_insertsrc.sql');  # Insert rows into source table
        sleep(15);                              # Allow mirroring to take effect
        $db_tgt-&gt;execSql('db2_readtgt.sql');    # Read target table</pre>
<pre>
 };</pre>
<pre>
 # Error thrown in eval {...}
 if ($@) { Environment::logf(&quot;\n\nErrors found: $@\n&quot;); }</pre>
<pre>
        # CLEANUP</pre>
<pre>
        $mConsole-&gt;stopMirroring($sub);         # Stop mirroring
        $mConsole-&gt;deleteMapping($sub);         # Delete mapping
        $mConsole-&gt;deleteSubscription($sub);    # Delete subscription</pre>
<pre>
        # Delete datastores
        $mConsole-&gt;deleteDatastore($ds_tgt);
        $mConsole-&gt;deleteDatastore($ds_src);

</pre>
<pre>
        # stop and delete cdc instances
        $cdc_src-&gt;stop();
        $cdc_tgt-&gt;stop();
        $cdc_src-&gt;delete();
        $cdc_tgt-&gt;delete();

</pre>
<pre>
        # shut down databases
        $db_src-&gt;stop();
        $db_tgt-&gt;stop();
 }

</pre>
<p>If everything works as expected source and target tables should have the same content.

</p>

</body>

</html>
